{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"a6d22f7c-00bf-525b-960e-764b4974f61b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = _objectSpread(_objectSpread(_objectSpread({}, themes.future), themes.prism), nightOwl);\n\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notes = makeShortcode(\"Notes\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(ImageLink, {\n    shape: \"round\",\n    src: \"https://raw.githubusercontent.com/bansalrachita/react-hooks-slides/master/src/images/reactLogo.svg\",\n    width: \"100px\",\n    height: \"100px\",\n    alt: \"React hooks logo\",\n    mdxType: \"ImageLink\"\n  }), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"Introduction\"), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"to React hooks\"))), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(ImageLink, {\n    margin: \"60px 0 0 50px\",\n    shape: \"round\",\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/hook.gif?raw=true\",\n    width: \"300px\",\n    height: \"300px\",\n    alt: \"Gif of Captain Hook\",\n    mdxType: \"ImageLink\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" What is React? \"), mdx(Quote, {\n    mdxType: \"Quote\"\n  }, \"\\\"Declarative, efficient and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from smaller and isolated pieces of code called components\\\"\"), mdx(AnchorLink, {\n    size: \"medium\",\n    href: \"https://reactjs.org/\",\n    mdxType: \"AnchorLink\"\n  }, \"- https://reactjs.org/\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: themeStyles,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Component\\\"\",\n    \"title\": \"\\\"Component\\\"\"\n  }, \"import React from \\\"react\\\";\\n\\nfunction MyComponent (props) => {\\n\\n  return <div>Hello World!</div>;\\n}\\n\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/helloWorld.png?raw=true\",\n    width: \"400px\",\n    height: \"300px\",\n    alt: \"Hello World demo\",\n    right: true,\n    mdxType: \"ImageLink\"\n  })), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Grid, {\n    columns: 1,\n    mdxType: \"Grid\"\n  }, mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(Tag, {\n    mdxType: \"Tag\"\n  }, \"Update State\"), mdx(Tag, {\n    mdxType: \"Tag\"\n  }, \"Side Effects\"), mdx(Tag, {\n    mdxType: \"Tag\"\n  }, \"Access DOM Elements\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"React < 16.8\\\" 1:28\",\n    \"title\": \"\\\"React\",\n    \"<\": true,\n    \"16.8\\\"\": true,\n    \"1:28\": true\n  }, \"class Counter extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n\\n  increment = () => {\\n    const { count } = this.state;\\n    this.setState({ count: count + 1 });\\n  };\\n\\n  render() {\\n    const { count } = this.state;\\n\\n    return (\\n      <>\\n        <div>{`Count: ${count}`}</div>\\n        <button onClick={this.increment}>+</button>\\n      </>\\n    );\\n  }\\n}\\n\\nexport default Counter;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"React < 16.8\\\" 4:7,15:24\",\n    \"title\": \"\\\"React\",\n    \"<\": true,\n    \"16.8\\\"\": true,\n    \"4:7,15:24\": true\n  }, \"class Counter extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n\\n  increment = () => {\\n    const { count } = this.state;\\n    this.setState({ count: count + 1 });\\n  };\\n\\n  render() {\\n    const { count } = this.state;\\n\\n    return (\\n      <>\\n        <div>{`Count: ${count}`}</div>\\n        <button onClick={this.increment}>+</button>\\n      </>\\n    );\\n  }\\n}\\n\\nexport default Counter;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"React < 16.8\\\" 10:13,21\",\n    \"title\": \"\\\"React\",\n    \"<\": true,\n    \"16.8\\\"\": true,\n    \"10:13,21\": true\n  }, \"class Counter extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n\\n  increment = () => {\\n    const { count } = this.state;\\n    this.setState({ count: count + 1 });\\n  };\\n\\n  render() {\\n    const { count } = this.state;\\n\\n    return (\\n      <>\\n        <div>{`Count: ${count}`}</div>\\n        <button onClick={this.increment}>+</button>\\n      </>\\n    );\\n  }\\n}\\n\\nexport default Counter;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"React < 16.8\\\"\",\n    \"title\": \"\\\"React\",\n    \"<\": true,\n    \"16.8\\\"\": true\n  }, \"class Counter extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      count: 0,\\n    };\\n  }\\n\\n  increment = () => {\\n    const { count } = this.state;\\n    this.setState({ count: count + 1 });\\n  };\\n\\n  render() {\\n    const { count } = this.state;\\n\\n    return (\\n      <>\\n        <div>{`Count: ${count}`}</div>\\n        <button onClick={this.increment}>+</button>\\n      </>\\n    );\\n  }\\n}\\n\\nexport default Counter;\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/counterBefore.gif?raw=true\",\n    width: \"350px\",\n    height: \"300px\",\n    alt: \"Counter App Demo\",\n    right: true,\n    mdxType: \"ImageLink\"\n  })), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Function component\\\" 2:4,7,10,15,16\",\n    \"title\": \"\\\"Function\",\n    \"component\\\"\": true,\n    \"2:4,7,10,15,16\": true\n  }, \"import React, { useState } from \\\"react\\\";\\n\\nexport const Counter = () => {\\n  const [count, setCount] = useState(0);\\n\\n  const increment = () => {\\n    setCount(count + 1);\\n  };\\n\\n  return (\\n    <>\\n      <div>{`Count: ${count}`}</div>\\n      <button onClick={increment}>+</button>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Function component\\\" 10:15\",\n    \"title\": \"\\\"Function\",\n    \"component\\\"\": true,\n    \"10:15\": true\n  }, \"import React, { useState } from \\\"react\\\";\\n\\nexport const Counter = () => {\\n  const [count, setCount] = useState(0);\\n\\n  const increment = () => {\\n    setCount(count + 1);\\n  };\\n\\n  return (\\n    <>\\n      <div>{`Count: ${count}`}</div>\\n      <button onClick={increment}>+</button>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Function component\\\" 1:15\",\n    \"title\": \"\\\"Function\",\n    \"component\\\"\": true,\n    \"1:15\": true\n  }, \"import React, { useState } from \\\"react\\\";\\n\\nexport const Counter = () => {\\n  const [count, setCount] = useState(0);\\n\\n  const increment = () => {\\n    setCount(count + 1);\\n  };\\n\\n  return (\\n    <>\\n      <div>{`Count: ${count}`}</div>\\n      <button onClick={increment}>+</button>\\n    </>\\n  );\\n};\\n\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" React hooks \"), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Use functions instead of classes.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Sharable state logic outside of the component.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Simpler to write and have less template code.\")), mdx(Grid, {\n    columns: 2,\n    mdxType: \"Grid\"\n  }, mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"p\", null, mdx(\"code\", null, \"useCake()\")), mdx(\"p\", null, mdx(\"code\", null, \"useFrosting()\")), mdx(\"p\", null, mdx(\"code\", null, \"useBake()\")), mdx(\"p\", null, mdx(\"code\", null, \"usePastries()\")))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"Rules of hooks\"), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Only call hooks at the top level, don't call them inside loops, lists or nested functions.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Only call Hooks from react function components or custom hooks.\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"- Only Call Hooks at the Top Level Don't call hooks inside of loops, nested functions or inside conditions. This ensures that hooks are always called in the same order in successive component renders. The way this works is React stores the sequence of hooks call during the first render and keeps checking against the order hooks are called in subsequent renders of the component. - Only Call Hooks from React Functions.Ensure that state logic is available to components source code.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"Examples\\\"\",\n    \"title\": \"\\\"Examples\\\"\"\n  }, \"export const Example = ({ data }) => {\\n  // \\u274C Error\\n  if (!data) {\\n    useHook();\\n  }\\n\\n  return <UI />;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6\",\n    \"1:6\": true\n  }, \"export const Example = ({ data }) => {\\n  // \\u274C Error\\n  const onClick = () => useHook();\\n\\n  return <UI />;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6\",\n    \"1:6\": true\n  }, \"export const Example = ({ data }) => {\\n  // \\uD83D\\uDFE2 success\\n  useHook();\\n\\n  return <UI />;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6\",\n    \"1:6\": true\n  }, \"export const useDom = () => {\\n  // \\uD83D\\uDFE2 success\\n  useEffect(() => {\\n    document.title = \\\"React is awesome \\uD83D\\uDE0A\\\";\\n  });\\n};\\n\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" Built-in hooks\"), mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/hooksApi.png?raw=true\",\n    width: \"500px\",\n    height: \"650px\",\n    altText: \"list of built-in hooks\",\n    mdxType: \"ImageLink\"\n  }), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useState\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [state, setState] = useState(initialState);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns a stateful value and a function to replace it.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Takes in initial state as an argument.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"The \", mdx(\"i\", null, \"setState\"), \" updates the state and rerenders the component with the new value.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Unlike \", mdx(\"i\", null, \"this.setState\"), \" in class components \", mdx(\"i\", null, \"useState\"), \" doesn't merge objects.\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"The `initialState` is used only on the first render and is disregraded further on. If the initial state is an expensive computation, it could be passed to the `useState` as a callback function as well. The `setState` takes in the new state and enqueues a re-render.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: themeStyles,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Counter\\\"\",\n    \"title\": \"\\\"Counter\\\"\"\n  }, \"import React, { useState } from \\\"react\\\";\\n\\nexport const Counter = () => {\\n  const [count, setCount] = useState(0);\\n\\n  const increment = () => {\\n    setCount(count + 1);\\n  };\\n\\n  const decerement = () => {\\n    setCount(count - 1);\\n  };\\n\\n  return (\\n    <>\\n      <div>{`Counter: ${count}`}</div>\\n      <div>\\n        <button onClick={increment}>\\u2795 Increment</button>\\n        <button onClick={decerement}>\\u2796 Decrement</button>\\n      </div>\\n    </>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(Counter, {\n    mdxType: \"Counter\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" useEffect \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"useEffect(() => {\\n  // Do something.\\n\\n  return () => {\\n    // cleanup\\n  };\\n});\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Used for running imperative code such timers, mutation, subscription, logging etc.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Runs after the render cycle is completed.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Can be run optionally by passing it dependency list.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns a cleanup function which runs after the effect, similar to\", \" \", mdx(\"i\", null, \"ComponentWillunmount\"), \".\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Similar to \", mdx(\"i\", null, \"ComponentDidUpdate\"), \" and \", mdx(\"i\", null, \"ComponentWillunmount\"), \" \", \"lifecycle methods in class components.\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"div\", null, mdx(\"code\", null, \"// componentDidMount\\n    useEffect(() => {\\n      // Do something...\\n    }, []);\")), mdx(\"div\", null, mdx(\"code\", null, \"// componentDidUpdate\\n    useEffect(() => {\\n      // Do something...\\n    });\")), mdx(\"div\", null, mdx(\"code\", null, \"// componentWillunmount\\n    useEffect(() => {\\n      return function() { \\n        //cleanup\\n      };\\n    }, []);\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Counter\\\"\",\n    \"title\": \"\\\"Counter\\\"\"\n  }, \"import React, { useState, useEffect } from \\\"react\\\";\\n\\nexport function Counter() {\\n  const [count, setCount] = useState(0);\\n  // componentDidUpdate:\\n  useEffect(() => {\\n    // Update the document title\\n    // using the browser API\\n    document.title = `You clicked ${count} times`;\\n  });\\n\\n  increment = () => setCount(count + 1);\\n\\n  return (\\n    <div>\\n      <p>You clicked {count} times</p>\\n      <button onClick={increment}>Click me</button>\\n    </div>\\n  );\\n}\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(TitleEffect, {\n    mdxType: \"TitleEffect\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useContext\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const value = useContext(MyContext);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Accepts a context object and returns the current context value for that context.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"i\", null, \"useContext\"), \" lets user read the context value and subscribe to its changes.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Component calling the \", mdx(\"i\", null, \"useContext\"), \" is always rerendered when the context value changes.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"i\", null, \"MyContext.Provider\"), \" is still needed in the tree to provide the context value.\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: themeStyles,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ThemeProvider Context\\\"\",\n    \"title\": \"\\\"ThemeProvider\",\n    \"Context\\\"\": true\n  }, \"const themes = {\\n  light: {\\n    foreground: \\\"#000000\\\",\\n    background: \\\"#eeeeee\\\",\\n  },\\n  dark: {\\n    foreground: \\\"#ffffff\\\",\\n    background: \\\"#222222\\\",\\n  },\\n};\\nconst ThemeContext = React.createContext(themes.light);\\n\\nexport const ThemeProvider = () => {\\n  return (\\n    <ThemeContext.Provider value={themes.light}>\\n      <Toolbar />\\n    </ThemeContext.Provider>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ThemeProvider Context\\\"\",\n    \"title\": \"\\\"ThemeProvider\",\n    \"Context\\\"\": true\n  }, \"const ThemedButton = () => {\\n  // Returns the current value of theme context object.\\n  const theme = useContext(ThemeContext);\\n\\n  return (\\n    <button style={{ background: theme.background, color: theme.foreground }}>\\n      I am styled by theme context!\\n    </button>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(UsingContext, {\n    mdxType: \"UsingContext\"\n  }))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"The value of the context object is determined by the nearest context provider above the component which its called in. The rerender happens even if the component is using React.memo or ComponentShouldUpdate and start from the component itself.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" useRef \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const refContainer = useRef(initialValue);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Persists for the full lifetime of the component.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns a mutable ref object with a property called \", mdx(\"i\", null, \"current\"), \".\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Takes an initial value and initializes current property of the ref object.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"It's more than just a way to access the DOM node, it can keep mutable variables like instance fields.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns same ref on every render.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Doesn't trigger or notify of state changes and component updates.\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: themeStyles,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"IntervalRef\\\"\",\n    \"title\": \"\\\"IntervalRef\\\"\"\n  }, \"const delay = 1000;\\n\\nconst IntervalRef = ({ setClean, setCount, count }) => {\\n  useEffect(() => {\\n    // Starts timer\\n    const id = setInterval(() => setCount(count + 1), delay);\\n\\n    return () => {\\n      clearInterval(id);\\n    };\\n    //Similar to ComponentDidMount\\n  }, []);\\n\\n  return <h1>{count}</h1>;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"IntervalRef Example\\\" 1:17\",\n    \"title\": \"\\\"IntervalRef\",\n    \"Example\\\"\": true,\n    \"1:17\": true\n  }, \"const delay = 1000;\\n\\nconst IntervalRef = ({ setClean, setCount, count }) => {\\n  // Interval callback\\n  const callbackRef = useRef();\\n\\n  useEffect(() => {\\n    // Runs after every render and\\n    // updates the ref with new count\\n    callbackRef.current = () => setCount(count + 1);\\n  });\\n\\n  useEffect(() => {\\n    // Starts timer and set intervalRef;\\n    const id = setInterval(() => callbackRef.current(), delay);\\n\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, []);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"IntervalRef Example\\\" 1:34\",\n    \"title\": \"\\\"IntervalRef\",\n    \"Example\\\"\": true,\n    \"1:34\": true\n  }, \"const delay = 1000;\\n\\nconst IntervalRef = ({ setClean, setCount, count }) => {\\n  // Interval callback\\n  const callbackRef = useRef();\\n\\n  useEffect(() => {\\n    // Runs after every render and updates the ref with new count\\n    callbackRef.current = () => setCount(count + 1);\\n  });\\n\\n  //Similar to ComponentDidMount\\n  useEffect(() => {\\n    // Starts setInterval\\n    const id = setInterval(() => callbackRef.current(), delay);\\n\\n    // Similar to ComponentWillunmount\\n    return () => {\\n      // Runs cleanup function\\n      setClean(true);\\n      clearInterval(id);\\n    };\\n  }, []);\\n\\n  return <h1>{count}</h1>;\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(IntervalRefExample, {\n    mdxType: \"IntervalRefExample\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useLayoutEffect\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"useLayoutEffect(() => {\\n  ...\\n\\n  // cleanup\\n  return () => {\\n    ...\\n  };\\n});\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Signature is identical to \", mdx(\"i\", null, \"useEffect\"), \" hook.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Fires synchronously after all DOM updates.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Fires after render but before the paint.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Use it to read DOM layout and synchronously re-render.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Blocks visual updates and should be used cautiously.\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=LayoutEffect\",\n    \"title\": \"LayoutEffect\"\n  }, \"export const LayoutEffect = () => {\\n  const [count, setCount] = React.useState(0);\\n\\n  useLayoutEffect(() => {\\n    if (count === 0) setCount(3.14);\\n  }, [count]);\\n\\n  return (\\n    <Card\\n      title='useLayoutEffect'\\n      actionButton={\\n        <button onClick={() => setCount(0)}>\\n          <span>\\u25B6\\uFE0F</span>\\n        </button>\\n      }\\n    >\\n      <span>\\uD83E\\uDD67</span>\\n      {` = ${count}`}\\n    </Card>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(LayoutEffect, {\n    mdxType: \"LayoutEffect\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useEffect vs useLayoutEffect\"), mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/uselayouteffect.gif?raw=true\",\n    width: \"600px\",\n    height: \"250px\",\n    mdxType: \"ImageLink\"\n  }), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useReducer\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [state, dispatch] = useReducer(reducer, initialArg, init);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Is an alternative to \", mdx(\"i\", null, \"useState\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Accepts a reducer of type \", mdx(\"i\", null, \"(state, action) => newState\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns the current \", mdx(\"i\", null, \"state\"), \" paired with \", mdx(\"i\", null, \"dispatch\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Takes in initial state as the second argument\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"To initialize lazily, a third argument is passed as a function.\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"The init function lets you initilize the state outside of the reducer and can come in handy for resetting initial state later.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" When to use? \"), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Preferable to \", mdx(\"i\", null, \"useState\"), \" when the state logic is complex like objects.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"When next state depends on the previous one.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"For optimizing performance in components that trigger deep updates.\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"This can be done by passing down dispatch function directly from `useReducer` via context instead passing down callbacks explicitly. Any child in the component tree can then use the dispatch to pass actions and update the state in the reducer.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Notes Example\\\"\",\n    \"title\": \"\\\"Notes\",\n    \"Example\\\"\": true\n  }, \"const NotesApp = () => {\\n  return (\\n    <>\\n      <NotesToolBar>\\n        <Input />\\n        <Button>\\u2795 Add</Button>\\n        <Button>\\u2796 Remove</Button>\\n      </NotesToolBar>\\n      <hr />\\n      <strong>Notes:</strong>\\n      <List>\\n        {state.map((note, idx) => (\\n          <ListItem>{`${idx + 1}. ${note}`}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Notes Example\\\"\",\n    \"title\": \"\\\"Notes\",\n    \"Example\\\"\": true\n  }, \"const initialState = [\\\"Hello there \\uD83D\\uDC4B!\\\", \\\"Add more notes below.\\\"];\\n\\nexport const reducer(state, action) {\\n  switch (action.type) {\\n    case \\\"add\\\":\\n      return [...state, action.note];\\n    case \\\"remove\\\":\\n      return state?.slice(0, state?.length - 1);\\n    default:\\n      return state;\\n  }\\n}\\n\\nconst NotesApp = () => {\\n  const [state] = useReducer(reducer, initialState);\\n\\n  return (\\n    <>\\n      <NotesToolBar>\\n        <Input />\\n        <Button>\\u2795 Add</Button>\\n        <Button>\\u2796 Remove</Button>\\n      </NotesToolBar>\\n      <hr />\\n      <strong>Notes:</strong>\\n      <List>\\n        {state.map((note, idx) => (\\n          <ListItem>{`${idx + 1}. ${note}`}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"Notes Example\\\"\",\n    \"title\": \"\\\"Notes\",\n    \"Example\\\"\": true\n  }, \"const NotesApp = () => {\\n  const [state, dispatch] = useReducer(reducer, initialState);\\n  const noteRef = useRef();\\n\\n  const onChange = (e) => {\\n    noteRef.current = e.target.value;\\n  };\\n\\n  return (\\n    <>\\n      <NotesToolBar>\\n        <Input onChange={onChange} />\\n        <Button\\n          onClick={() => dispatch({ type: \\\"add\\\", note: noteRef.current })}\\n        >\\n          \\u2795 Add\\n        </Button>\\n        <Button onClick={() => dispatch({ type: \\\"remove\\\" })}>\\u2796 Remove</Button>\\n      </NotesToolBar>\\n      <hr />\\n      <strong>Notes:</strong>\\n      <List>\\n        {state.map((note, idx) => (\\n          <ListItem>{`${idx + 1}. ${note}`}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"Notes Example\\\"\",\n    \"title\": \"\\\"Notes\",\n    \"Example\\\"\": true\n  }, \"const NotesApp = () => {\\n  const [state, dispatch] = useReducer(reducer, initialState);\\n  const noteRef = useRef();\\n\\n  const onChange = (e) => {\\n    noteRef.current = e.target.value;\\n  };\\n\\n  return (\\n    <>\\n      <NotesToolBar>\\n        <Input onChange={onChange} />\\n        <Button\\n          onClick={() => dispatch({ type: \\\"add\\\", note: noteRef.current })}\\n        >\\n          \\u2795 Add\\n        </Button>\\n        <Button onClick={() => dispatch({ type: \\\"remove\\\" })}>\\u2796 Remove</Button>\\n      </NotesToolBar>\\n      <hr />\\n      <strong>Notes:</strong>\\n      <List>\\n        {state.map((note, idx) => (\\n          <ListItem>{`${idx + 1}. ${note}`}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(NotesApp, {\n    mdxType: \"NotesApp\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useCallback\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const memoizedCallback = useCallback(() => {\\n  doSomething(a, b);\\n}, [a, b]);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Takes in an inline callback as an argument and an array of dependencies.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns a memoized function that only changes when the dependencies update.\", \" \"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Useful when passing callback as props to the child components.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"i\", null, \"useCallback(fn, deps)\"), \" is equivalent to \", mdx(\"i\", null, \"useMemo(() => fn, deps)\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Child components that rely on referencial equality will only re-render when the dependencies have udpated and this will prevent unecessary rerenders.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"❌ Wrong usage\\\"\",\n    \"title\": \"\\\"❌\",\n    \"Wrong\": true,\n    \"usage\\\"\": true\n  }, \"export const Example = () => {\\n  import React, { useCallback } from \\\"react\\\";\\n\\n  const onClick = useCallback(() => {\\n    // Do something...\\n  }, []);\\n\\n  // Cost of optimization is more than the optimization\\n  return <button onClick={onClick}>\\\"I'm just a simple button \\uD83D\\uDC7B\\\"</button>;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"🟢 Correct usage\\\"\",\n    \"title\": \"\\\"🟢\",\n    \"Correct\": true,\n    \"usage\\\"\": true\n  }, \"export const Example = () => {\\n  import React, { useCallback } from \\\"react\\\";\\n\\n  const onClick = useCallback(() => {\\n    // Do something...\\n  }, []);\\n\\n  return (\\n    <HugeList data={data} onClick={onClick}>\\n      ...\\n    </HugeList>\\n  );\\n};\\n\\nconst HugeList = React.memo(() => {\\n  // ...\\n});\\n\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useCallback and React.memo()\"), mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/usecallback.gif?raw=true\",\n    width: \"600px\",\n    height: \"250px\",\n    mdxType: \"ImageLink\"\n  }), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \" useMemo \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const memoizedValue = useMemo(() => expensiveFn(a, b), [a, b]);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Returns a memoized value.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Like the \", mdx(\"i\", null, \"useCallback\"), \" hook, it takes in a function as an argument and an array of dependencies.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"It recomputes the value only when one of dependencies is updated.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Unlike the \", mdx(\"i\", null, \"useEffect\"), \" hook, it runs during the render time.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"If no dependencies are provided, the value is re-computed at every render.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Should be relied upon for optimization, not as a sematic guarantee.\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Don't confuse `useMemo` with React's `memo`. React.memo is used to wrap the component to prevent re-renders whereas `usMemo` is used to memoize values. You might think that why doesn't React apply useMemo to everything by default? The reason is that React does a comparison with the dependency list values to decide if it should recompute the value. This computation can be more expensive than just recomputing the value during re-render.\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"SearchResults\\\"\",\n    \"title\": \"\\\"SearchResults\\\"\"\n  }, \"export const SearchResults = ({ data }) => {\\n  const [inputText, setInputText] = useState(\\\"\\\");\\n  const [searchInput, setSearchInput] = useState(\\\"\\\");\\n  // Updates input text\\n  const onChangeInput = (e) => {\\n    setInputText(e.target.value);\\n  };\\n  // Updates search filter\\n  const onClick = () => {\\n    setSearchInput(inputText);\\n  };\\n\\n  const searchResults = () =>\\n    data.filter((d) => {\\n      console.log(\\\"Filter function is running ...\\\");\\n\\n      const regex = new RegExp(`${searchInput}`, \\\"i\\\");\\n      return d.search(regex) !== -1;\\n    });\\n\\n  return (\\n    <>\\n      <Input value={inputText} onChange={onChangeInput}></Input>\\n      <Button onClick={onClick}>Search \\uD83D\\uDD0D</Button>\\n      <List>\\n        {searchResults.map((result, index) => (\\n          <ListItem key={`mt-${index}`}>{result}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"SearchResults\\\"\",\n    \"title\": \"\\\"SearchResults\\\"\"\n  }, \"export const SearchResults = ({ data }) => {\\n  const [inputText, setInputText] = useState(\\\"\\\");\\n  const [searchInput, setSearchInput] = useState(\\\"\\\");\\n\\n  const onChangeInput = (e) => {\\n    setInputText(e.target.value);\\n  };\\n\\n  const onClick = () => {\\n    setSearchInput(inputText);\\n  };\\n\\n  const searchResults = useMemo(\\n    () =>\\n      data.filter((d) => {\\n        console.log(\\\"Filter function is running ...\\\");\\n\\n        const regex = new RegExp(`${searchInput}`, \\\"i\\\");\\n        return d.search(regex) !== -1;\\n      }),\\n    [searchInput]\\n  );\\n\\n  return (\\n    <>\\n      <Input value={inputText} onChange={onChangeInput}></Input>\\n      <Button onClick={onClick}>Search \\uD83D\\uDD0D</Button>\\n      <List>\\n        {searchResults.map((result, index) => (\\n          <ListItem key={`mt-${index}`}>{result}</ListItem>\\n        ))}\\n      </List>\\n    </>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    columns: 2,\n    mdxType: \"Overlay\"\n  }, mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(SearchResults, {\n    data: memoData,\n    mdxType: \"SearchResults\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useImperativeHandle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"useImperativeHandle(ref, createHandle, [deps]);\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Customizes the instance value that is exposed to the parent components using refs.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Should be used with \", mdx(\"i\", null, \"forwardRef\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"FancyInput\\\"\",\n    \"title\": \"\\\"FancyInput\\\"\"\n  }, \"const FancyInput = React.forwardRef(({ children, ...rest }, ref) => {\\n  const [focussed, setFocussed] = useState(false);\\n  const inputRef = useRef();\\n\\n  // Runs only once.\\n  useImperativeHandle(\\n    ref,\\n    () => {\\n      return {\\n        focus: () => {\\n          // updates the background color on focus\\n          setFocussed(true);\\n          inputRef.current.focus();\\n        },\\n        blur: () => {\\n          setFocussed(false);\\n          inputRef.current.blur();\\n        },\\n      };\\n    },\\n    []\\n  );\\n\\n  return (\\n    <Input {...rest} ref={inputRef} focussed={focussed}>\\n      {children}\\n    </Input>\\n  );\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"FancyInputExample\\\" 1:20\",\n    \"title\": \"\\\"FancyInputExample\\\"\",\n    \"1:20\": true\n  }, \"export const FancyInputExample = () => {\\n  const buttonRef = React.createRef();\\n\\n  const onClick = () => {\\n    buttonRef.current.focus();\\n  };\\n  const onClickBlur = () => {\\n    buttonRef.current.blur();\\n  };\\n\\n  return (\\n    <>\\n      <FancyInput ref={buttonRef}></FancyInput>\\n      <div>\\n        <Button onClick={onClick}>Focus me</Button>\\n        <Button onClick={onClickBlur}>Blur me</Button>\\n      </div>\\n    </>\\n  );\\n};\\n\"))), mdx(Overlay, {\n    mdxType: \"Overlay\"\n  }, mdx(\"div\", null), mdx(CodeSandbox, {\n    mdxType: \"CodeSandbox\"\n  }, mdx(FancyInputExample, {\n    mdxType: \"FancyInputExample\"\n  }))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useDebugValue\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"useDebugValue(date, (date) => date.toDateString());\\n\")), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Can be used to display a label for custom hooks in React dev-tools.\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Accepts a formatting function which is called only when the hook is inspected.\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"useFriendStatus\\\"\",\n    \"title\": \"\\\"useFriendStatus\\\"\"\n  }, \"function useFriendStatus(friendID) {\\n  const [isOnline, setIsOnline] = useState(null);\\n\\n  // ...\\n\\n  // Show a label in DevTools next to this Hook\\n  // e.g. \\\"FriendStatus: Online\\\"\\n  useDebugValue(isOnline ? \\\"Online\\\" : \\\"Offline\\\");\\n\\n  return isOnline;\\n}\\n\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"useDebugValue\"), mdx(ImageLink, {\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/usedebugvalue.png?raw=true\",\n    width: \"500px\",\n    height: \"300px\",\n    mdxType: \"ImageLink\"\n  }), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"Do hooks replace redux?\"), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"TLDR; Not really\"), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Hooks are an aternative to class based react components\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Should be used for component state management\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"Redux stores and manages the application state (travel-debugging, data persistance)\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Heading, {\n    marginTop: \"auto\",\n    mdxType: \"Heading\"\n  }, \"Thank you!\")), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(UnOrderedList, {\n    listStyle: \"none\",\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(AnchorLink, {\n    widthSize: \"large\",\n    href: \"https://www.linkedin.com/in/rachitabansal/\",\n    mdxType: \"AnchorLink\"\n  }, mdx(ImageLink, {\n    height: \"28px\",\n    src: \"https://img.shields.io/badge/linkedin-%230077B5.svg?&style=for-the-badge&logo=linkedin&logoColor=white\",\n    mdxType: \"ImageLink\"\n  }), \"@rachitabansal\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(AnchorLink, {\n    height: \"28px\",\n    widthSize: \"large\",\n    href: \"https://twitter.com/rachitaabansal\",\n    mdxType: \"AnchorLink\"\n  }, mdx(ImageLink, {\n    height: \"28px\",\n    src: \"https://img.shields.io/badge/twitter-%231DA1F2.svg?&style=for-the-badge&logo=twitter&logoColor=white\",\n    mdxType: \"ImageLink\"\n  }), \"@rachitabansal\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(AnchorLink, {\n    widthSize: \"large\",\n    href: \"https://medium.com/@rachitabansal\",\n    mdxType: \"AnchorLink\"\n  }, mdx(ImageLink, {\n    height: \"28px\",\n    src: \"https://img.shields.io/badge/medium-%2312100E.svg?&style=for-the-badge&logo=medium&logoColor=white\",\n    mdxType: \"ImageLink\"\n  }), \"@rachitabansal\")), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(AnchorLink, {\n    widthSize: \"large\",\n    href: \"https://github.com/react-hooks-slides\",\n    mdxType: \"AnchorLink\"\n  }, mdx(ImageLink, {\n    height: \"40px\",\n    width: \"40px\",\n    src: \"https://github.com/bansalrachita/react-hooks-slides/blob/master/src/images/github.svg?raw=true\",\n    mdxType: \"ImageLink\"\n  }), \"@bansalrachita\")))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }), mdx(\"hr\", null), mdx(Heading, {\n    mdxType: \"Heading\"\n  }, \"Talk stack & references \"), mdx(UnOrderedList, {\n    mdxType: \"UnOrderedList\"\n  }, mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"mdx-deck@4.x\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"code-surfer@3.x\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"styled-components@5.x\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, \"https://reactjs.org/\"), mdx(ListItem, {\n    mdxType: \"ListItem\"\n  }, mdx(\"span\", null, \"Find the slides @\"), mdx(AnchorLink, {\n    size: \"medium\",\n    href: \"https://bansalrachita.github.io/react-hooks-slides/\",\n    mdxType: \"AnchorLink\"\n  }, \"https://bansalrachita.github.io/react-hooks-slides/\"))), mdx(PageNumber, {\n    mdxType: \"PageNumber\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","title":""}},"pageContext":{"matchPath":"/*","id":"a6d22f7c-00bf-525b-960e-764b4974f61b","slug":"/react-hooks-slides","title":""}},"staticQueryHashes":[]}